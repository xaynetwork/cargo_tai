name: Rust-CI

on:
  push:

env:
  RUST_STABLE: 1.54.0
  RUST_NIGHTLY: nightly-2021-08-08

permissions:
  contents: read

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  cargo-registry-cache:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#rust-tools
    name: cargo-registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      # We want to create a new cache after a week. Otherwise, the cache will
      # take up too much space by caching old dependencies
      - name: Generate Year + ISO week number key
        id: get-date
        shell: bash
        run: echo "::set-output name=date::$(/bin/date -u "+%Y-%V")"

      - name: Generate cargo registry cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-${{ github.job }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/Cargo.lock') }})"

      - name: Restore cargo registry ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-${{ github.job }}-${{ steps.get-date.outputs.date }}-

      - name: Fetch dependencies
        run: cargo fetch

  cargo-format:
    name: cargo-format
    needs: cargo-registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_NIGHTLY }} toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_NIGHTLY }}
          components: rustfmt
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      # cargo fmt does not create any artifacts, therefore we don't need to cache the target folder
      - name: cargo fmt
        run: cargo fmt --all -- --check

  cargo-check:
    name: cargo-check
    needs: cargo-registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: cargo check
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --all-targets
          cargo check --all-targets --all-features

  cargo-clippy:
    name: cargo-clippy
    needs: [cargo-registry-cache, cargo-check]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          components: clippy
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: cargo clippy
        run: |
          cargo clippy --all-targets -- --deny warnings
          cargo clippy --all-targets --all-features -- --deny warnings

  cargo-test:
    name: cargo-test
    needs: [cargo-registry-cache, cargo-check]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: Run tests
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo test --workspace --exclude test-project
          cargo test --all-targets --all-features --workspace --exclude test-project

  test-on-ios-simulator:
    name: test-on-ios-simulator
    needs: [cargo-registry-cache, cargo-test]
    runs-on: macos-10.15
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: x86_64-apple-ios
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Start iOS simulator
        run: |
          xcrun simctl create "Test Device" "iPhone 12 Pro" iOS14.4
          xcrun simctl boot "Test Device"

      - name: Cache build artifacts
        uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: Install cargo-tai
        run: cargo install --path cargo-tai --debug

      - name: Run iOS test
        working-directory: ${{ github.workspace }}/test-project
        env:
          RUST_LOG: "tai=trace"
        run: cargo-tai tests --target x86_64-apple-ios -r test_txt=./data/test.txt --args -Z,unstable-options,--report-time

      - name: Run iOS benchmark
        working-directory: ${{ github.workspace }}/test-project
        env:
          RUST_LOG: "tai=trace"
        run: cargo-tai benches --target x86_64-apple-ios

  # test-on-android-emulator:
  #   name: test-on-android-emulator
  #   runs-on: ubuntu-20.04
  #   needs: [cargo-registry-cache, cargo-test]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

  #     - name: Install ${{ env.RUST_STABLE }} toolchain
  #       id: rust-toolchain
  #       uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
  #       with:
  #         profile: minimal
  #         toolchain: ${{ env.RUST_STABLE }}
  #         target: x86_64-linux-android
  #         default: true

  #     - name: Use cached cargo registry
  #       uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
  #       with:
  #         path: |
  #           ~/.cargo/registry/index
  #           ~/.cargo/registry/cache
  #           ~/.cargo/git/db
  #         key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

  #     - name: Cache build artifacts
  #       uses: actions/cache@a7c34adf76222e77931dedbf4a45b2e4648ced19 # v2.1.6
  #       with:
  #         path: ${{ github.workspace }}/target
  #         key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

  #     - name: Install cargo-tai
  #       run: cargo install --path cargo-tai --debug

  #     - name: Run android tests and benchmarks
  #       uses: reactivecircus/android-emulator-runner@5de26e4bd23bf523e8a4b7f077df8bfb8e52b50e # v2.19.0
  #       env:
  #         RUST_LOG: "tai=trace"
  #       with:
  #         arch: x86_64
  #         api-level: 29
  #         script: cargo-tai tests --target x86_64-linux-android -r test_txt=./test-project/data/test.txt --args -Z,unstable-options,--report-time --android-api-lvl 21 --android-ndk $ANDROID_NDK_LATEST_HOME -- -p test-project && cargo-tai benches --target x86_64-linux-android --android-api-lvl 21 --android-ndk $ANDROID_NDK_LATEST_HOME -- -p test-project
